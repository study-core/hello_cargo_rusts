///
/// ######################################################################################################################################################
/// 
/// 表达式、语句
/// 
/// ######################################################################################################################################################
///  
/// 语句(Statements)是执行一些操作 【但不返回值】 的指令
/// 
/// 表达式(Expressions)计算并产生一个值
/// 
/// 
/// ********************************************************************
/// 函数调用是一个表达式
/// 
/// 宏调用是一个表达式
/// ********************************************************************
/// 
/// 
/// 如:
/// 1. let 关键字创建变量并绑定一个值是一个语句
/// 
///             let y = 6; 是一个语句
/// 
/// 2. 用大括号创建的一个新的块作用域也是一个表达式
/// 
/// 
/// let y = {
///     let x = 3;
///     x + 1
/// };
/// 
/// 
/// 中
/// {
///     let x = 3;
///     x + 1
/// }
/// 
/// 就是表达式
/// 
/// 
/// 下面这个加了 ";" 号的是 语句  (这个返回 () )
/// 
/// fn plus_one(x: i32) -> i32 {   // 这个报错
///     x + 1;
/// }
/// 
/// 
/// 而下面这个是 表达式   (这个返回 i32)
/// 
/// fn plus_one(x: i32) -> i32 {  // 这个 OK
///     x + 1
/// }
/// 
/// 
/// ######################################################################################################################################################
/// if 表达式
/// ######################################################################################################################################################
/// 
/// 因为 if 是一个表达式, 我们可以在 let 语句的右侧使用它
/// 
/// 
/// let number = if condition { 5 } else { 6 };    // 类似 三目表达式
/// 
/// 
/// 


/// ######################################################################################################################################################
///  Rust 有三种循环:loop、while 和 for
/// ######################################################################################################################################################

/// loop
///
fn loop_func() -> () {
    loop {
        println!("again!");
    }
}


/// 
/// while
/// 
fn while_func() -> () {
    while true {
        println!("again!");
    }
}

 
///
/// 
/// for
/// 
fn for_func() -> () {
    let a = [10,  20,  30,  40,  50];

    for element in a {
        println!("the value is: {element}");
    }
}

///