///
/// 
/// ######################################################################################################################################################
///  newtype 的 定义 及 使用
/// ###################################################################################################################################################### 
/// 
/// 
/// 
/// ---------------------------------------------------------------------------
/// 类型别名     (类型别名的主要用途是减少重复)
/// ---------------------------------------------------------------------------
/// 
/// 
/// 
/// 
///  fn main() {
///      type Kilometers = i32;     // 类型别名
///  
///      let x: i32 = 5;
///      let y: Kilometers = 5;
///  
///      println!("x + y = {}", x + y);
///  }
/// 
/// 又如：
/// 
/// 
/// 
///  fn main() {
///      type Thunk = Box<dyn Fn() + Send + 'static>;    // 定义 类型别名   (因为类型太长了， 容易出错)
///  
///      let f: Thunk = Box::new(|| println!("hi"));
///  
///      fn takes_long_type(f: Thunk) {                 // 使用 类型别名
///          // --snip--
///      }
///  
///      fn returns_long_type() -> Thunk {              // 使用 类型别名
///          // --snip--
///          Box::new(|| ())
///      }
///  }
/// 
/// 
/// 
/// 
/// ######################################################################################################################################################
/// empty type   也就是   !     也就是   从不返回的 never type
/// ###################################################################################################################################################### 
/// 
/// 
/// 当一个函数返回!类型时，表示该函数一定会抛出一个异常或进程会立即停止，而不会返回任何值。
/// 
/// 
///             1、 ！类型通常用于表示panic的情况
///             
///             2、 ！类型还可以用于在match表达式中表示不可能的情况
/// 
/// ---------------------------------------------------------------------------
/// 
///  let option: Option<i32> = None;
///  match option {
///      Some(x) => println!("x = {}", x),
///      None => {
///          // 这里我们知道不可能出现None的情况
///          // 所以我们可以使用!类型来表示这种不可能的情况
///          let impossible: ! = panic!("Should not happen");
///      }
///  }
///  
///  ---------------------------------------------------------------------------
///  
///  // 使用Never类型表示程序不会继续执行
///  fn exit_program() -> ! {
///      println!("Exiting the program...");
///      std::process::exit(0);
///  }
///  
/// ---------------------------------------------------------------------------
/// 
///  let option: Option<i32> = None;
///  match option {
///      Some(x) => println!("x = {}", x),
///      None => {
///          
///          let impossible: ! = panic!("Should not happen");   // 这里， 不可能被赋值的
///      }
///  }
/// 



