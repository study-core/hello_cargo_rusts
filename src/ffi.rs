///
/// ######################################################################################################################################################
///  调用外部函数   extern
/// ###################################################################################################################################################### 
/// 
/// 
/// 有时你的 Rust 代码可能需要与其他语言编写的代码交互。为此 Rust 有一个关键字，extern，有助于创建和使用 外部函数接口（Foreign Function Interface，FFI）
/// 
/// 
/// 
/// 
/// 示例： 如何集成 C 标准库中的 abs 函数
/// 
/// 
/// (extern 块中声明的函数在 Rust 代码中总是不安全的。因为其他语言不会强制执行 Rust 的规则且 Rust 无法检查它们)
/// 
/// 
/// 
///  extern "C" {    // 使用 rust 语法，声明 C 的 abs 函数签名
///      fn abs(input: i32) -> i32;
///  }
///  
///  fn main() {
///      unsafe {
///          println!("Absolute value of -3 according to C: {}", abs(-3));
///      }
///  }
/// 
/// 
/// 
/// 
/// 
/// ######################################################################################################################################################
///  创建一个允许其他语言调用 Rust 函数的接口
/// ######################################################################################################################################################
/// 
/// 也可以使用 extern 来创建一个允许其他语言调用 Rust 函数的接口
/// 
/// 
/// 
/// 
/// 不同于创建整个 extern 块，就: (在 fn 关键字之前增加 extern 关键字并为相关函数指定所用到的 ABI) 
/// 
/// 还需增加 #[no_mangle] 注解来告诉 Rust 编译器不要 mangle 此函数的名称。
/// 
/// 
/// Mangling 发生于当编译器将我们指定的函数名修改为不同的名称时，这会增加用于其他编译过程的额外信息，不过会使其名称更难以阅读。
/// 每一个编程语言的编译器都会以稍微不同的方式 mangle 函数名，所以为了使 Rust 函数能在其他语言中指定，必须禁用 Rust 编译器的 name mangling.
/// 
/// 
/// #[no_mangle]
/// pub extern "C" fn call_from_c() {
///     println!("Just called a Rust function from C!");
/// }
